# The Lucky charm frameowrk for Juju.
#
# This is the varlink RPC schema definition for the Lucky daemon and client communication
# protocol.
interface lucky.rpc

# General catch-all error type
error Error(message: string)
# Returned when a method must be called with `more`
error RequiresMore()

# Trigger a Juju hook
# 
# If this hook is called with --more it will return once for each line of output from the hook.
#
# If hook execution failed this will throw a `HookFailed` error
method TriggerHook(hook_name: String, environment: [string]string) -> ()

# Tick the cron scheduler to execute pending jobs. This requires the value from the JUJU_CONTEXT_ID
# environment variable, meaning it has to be run from inside a Juju context by using `juju-run`.
method CronTick(juju_context_id: string) -> ()

# Stops the deamon service
method StopDaemon() -> ()

# The status of a Lucky script
type ScriptStatus (
    state: (Maintenance, Blocked, Waiting, Active),
    message: ?string
)

# Sets a script's status
method SetStatus(script_id: string, status: ScriptStatus) -> ()

# Get the private IP address
method GetPrivateAddress() -> (address: string)

# Get the public network address ( may be a DNS name)
method GetPublicAddress() -> (address: string)

# Get juju config. Value will be the JSON-encoded value.
method GetConfig() -> (config: [](key: string, value: string))

# Gets the path, on the host, to a Juju resource
method GetResource(resource_name: string) -> (path: string) 

# Opens up the provided port or port range in the firewall ( assuming the charm is exposed )
method PortOpen(port: string) -> ()
# Opens up the provided port or port range in the firewall ( assuming the charm is exposed )
method PortClose(port: string) -> ()
# Closes all opened ports
method PortCloseAll() -> ()
# Gets the list of ports opened *by this running charm*
method PortGetOpened() -> (ports: []string)

#
# Unit Key-Value
#

# Get a value in the Unit's local Key-Value store. Value will be null if the key is not set.
method UnitKvGet(key: string) -> (value: ?string)
# Get all of the key-value pairs that have been set.
method UnitKvGetAll() -> (pairs: [](key: string, value: string))
# Set a value in the Unit's local Key-Value store. Setting `value` to null will erase the value.
method UnitKvSet(key: string, value: ?string) -> ()

#
# Juju Relations
#

method RelationSet(data: [string]string, relation_id: ?string, app: bool) -> ()
method RelationGet(relation: ?(relation_id: string, remote_unit: string), app: bool) -> (data: [string]string)
method RelationList(relation_id: ?string) -> (units: []string)
method RelationIds(relation_name: string) -> (ids: []string)

#
# Leadership
#

method LeaderIsLeader() -> (is_leader: bool)
method LeaderSet(data: [string]string) -> ()
method LeaderGet() -> (data: [string]string)

#
# Container
#

# Apply updates to the container configuration for all containers
method ContainerApply() -> ()
# Delete a container
method ContainerDelete(container_name: ?string) -> ()

# Set the container entrypoint. If set to null, the container will use its default
method ContainerSetEntrypoint(entrypoint: ?string, container_name: ?string) -> ()
# Set the container command. If set to null, the container will use its default
method ContainerSetCommand(command: ?[]string, container_name: ?string) -> ()

#
# Container Image
#

# Set a container's image
# 
# If `no_pull` is set to `true` the image will not be pulled before starting the container
method ContainerImageSet(image: string, container_name: ?string, no_pull: bool) -> ()
# Get a container's image. Image will be none if container doesn't exist.
method ContainerImageGet(container_name: ?string) -> (image: ?string)

#
# Container Environment
#

# Get the value of a container environment variable. Value will be null if the variable is not set.
method ContainerEnvGet(key: string, container_name: ?string) -> (value: ?string)
# Set the value of a container environment variable. Setting value to null will delete the variable.
method ContainerEnvSet(key: string, value: ?string, container_name: ?string) -> ()
# Get the value of all container environment variables.
method ContainerEnvGetAll(container_name: ?string) -> (pairs: [](key: string, value: string))

#
# Container volumes
#

# Add a docker volume to the container. If the source does not start with a `/` it is taken as
# a volume name and put in the Lucky data dir for the charm unit. If it does start with a `/` it
# is bind mounted to the host at that location.
method ContainerVolumeAdd(source: string, target: string, container_name: ?string) -> ()
# Remove a volume from the container. The container path is the path of the volume in the container.
# If `delete_data` is true, the volume source data will be deleted as well as the mount being removed
# from the container.
#
# `data_deleted` will be true if the source data was deleted. `data_deleted` may be false, even if
# `delete_data` was set to true, if the source path was mounted to more than one container path and
# would still be mounted even after removing the specified mount.
method ContainerVolumeRemove(container_path: string, delete_data: bool, container_name: ?string) -> (data_deleted: bool)
# Get the list of volumes in the format of `source:target`
method ContainerVolumeGetAll(container_name: ?string) -> (volumes: [](source: string, target: string))

#
# Container ports
#

# Add a port binding to a container
method ContainerPortAdd(host_port: int, container_port: int, protocol: string, container_name: ?string) -> ()
# Remove a port binding from a container
method ContainerPortRemove(host_port: int, container_port: int, protocol: string, container_name: ?string) -> ()
# Remove all of the containers port bindings
method ContainerPortRemoveAll(container_name: ?string) -> ()
# Get a list of the ports that have been bound for the container
method ContainerPortGetAll(container_name: ?string) -> (ports: [](host_port: int, container_port: int, protocol: string))

#
# Container network
#

# Set the container network. Setting network_name to null will unset the network
method ContainerNetworkSet(network_name: ?string, container_name: ?string) -> ()