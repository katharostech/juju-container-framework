//! Contains the Lucky RPC implementaiton used for client->daemon communication.

#[allow(bare_trait_objects)]
/// The varlink RPC code ( generated by build.rs from `rpc/lucky.rpc.varlink` )
pub(crate) mod lucky_rpc;
pub(crate) use lucky_rpc::*;

use std::sync::{Arc, RwLock};

/// Implementation of the Lucky RPC interface
struct LuckyRpc;

impl VarlinkInterface for LuckyRpc {
    fn trigger_hook(
        &self,
        call: &mut dyn Call_TriggerHook,
        hook_name: String,
    ) -> varlink::Result<()> {
        println!("Ran hook: {}", hook_name);

        call.reply()?;

        Ok(())
    }
}

/// Get the server service
pub(crate) fn get_service() -> varlink::VarlinkService {
    let instance = LuckyRpc;
    varlink::VarlinkService::new(
        "lucky.rpc",
        "lucky daemon",
        clap::crate_version!(),
        "https://github.com/katharostech/lucky",
        vec![Box::new(lucky_rpc::new(Box::new(instance)))],
    )
}

/// Get the client
pub(crate) fn get_client(connection: Arc<RwLock<varlink::Connection>>) -> VarlinkClient {
    VarlinkClient::new(connection)
}
