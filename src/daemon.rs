//! Contains the Lucky RPC implementaiton used for client->daemon communication.
use anyhow::Context;
use serde::{Deserialize, Serialize};

use std::collections::HashMap;
use std::fs::OpenOptions;
use std::io::Write;
use std::path::PathBuf;
use std::sync::{
    atomic::{AtomicBool, Ordering},
    Arc, RwLock,
};

use crate::types::{HookScript, LuckyMetadata, ScriptState, ScriptStatus};

#[allow(clippy::all)]
#[allow(bare_trait_objects)]
/// The varlink RPC code ( generated by build.rs from `rpc/lucky.rpc.varlink` )
pub(crate) mod lucky_rpc;
pub(crate) use lucky_rpc as rpc;

mod tools;

#[derive(Debug, Default, Serialize, Deserialize)]
/// Contains the daemon state, which can be serialize and deserialized for persistance across
/// daemon crashes, upgrades, etc.
struct DaemonState {
    #[serde(rename = "script-statuses")]
    /// The statuses of all of the scripts
    script_statuses: HashMap<String, ScriptStatus>,
    /// The unit-local key-value store
    kv: HashMap<String, String>,
}

/// The Lucky Daemon RPC service
struct LuckyDaemon {
    /// The charm directory
    charm_dir: PathBuf,
    /// The directory in which to store the daemon state
    state_dir: PathBuf,
    /// The contents of the charm's lucky.yaml config
    lucky_metadata: LuckyMetadata,
    /// Used to indicate that the server should stop listening.
    /// This will be set to true to indicate that the server should stop.
    stop_listening: Arc<AtomicBool>,
    /// The daemon state. This will be serialized and written to disc for persistance when the
    /// daemon crashes or is shutdown.
    state: Arc<RwLock<DaemonState>>,
}

impl LuckyDaemon {
    /// Create a new daemon instance
    ///
    /// stop_listening will be set to `true` by the daemon if it recieves a StopDaemon RPC. The
    /// actual stopping of the server itself is not handled by the daemon.
    fn new(
        lucky_metadata: LuckyMetadata,
        charm_dir: PathBuf,
        state_dir: PathBuf,
        stop_listening: Arc<AtomicBool>,
    ) -> Self {
        let daemon = LuckyDaemon {
            lucky_metadata,
            charm_dir,
            state_dir,
            stop_listening,
            state: Default::default(),
        };

        // Load daemon state
        tools::load_state(&daemon).unwrap_or_else(|e| {
            log::error!(
                "{:?}",
                e.context("Could not load daemon state from filesystem")
            );
        });

        // Update the Juju status
        crate::juju::set_status(tools::get_juju_status(&daemon), None).unwrap_or_else(|e| {
            log::warn!("{:?}", e.context("Could not set juju status"));
        });

        log::trace!("Loaded daemon state: {:#?}", daemon.state.read().unwrap());

        daemon
    }
}

impl Drop for LuckyDaemon {
    /// Persist the daeomon state before it is dropped
    fn drop(&mut self) {
        tools::flush_state(&self).unwrap_or_else(log_error);
    }
}

impl rpc::VarlinkInterface for LuckyDaemon {
    /// Trigger a Juju hook
    fn trigger_hook(
        &self,
        call: &mut dyn rpc::Call_TriggerHook,
        hook_name: String,
        environment: HashMap<String, String>,
    ) -> varlink::Result<()> {
        log::info!("Triggering hook: {}", hook_name);

        // Set the Juju context id during script execution
        if let Some(context) = environment.get("JUJU_CONTEXT_ID") {
            std::env::set_var("JUJU_CONTEXT_ID", context);
        }

        // Run hook scripts
        let mut exit_code = 0;
        if let Some(hook_scripts) = self.lucky_metadata.hooks.get(&hook_name) {
            for hook_script in hook_scripts {
                match hook_script {
                    HookScript::HostScript(script_name) => {
                        let code = tools::run_host_script(self, call, script_name, &environment)?;
                        if code != 0 {
                            exit_code = 1;
                        }
                    }
                    HookScript::ContainerScript(_script_name) => {
                        log::warn!("Container scripts not yet implemented");
                    }
                }
            }

            // Update the Juju status as Juju will clear it if we don't re-set it after hook
            // execution
            crate::juju::set_status(tools::get_juju_status(&self), Some(&environment))
                .or_else(|e| call.reply_error(e.to_string()))?;

            call.set_continues(false);
            call.reply(Some(exit_code), None)?;

        // If the hook is not handled by the charm
        } else {
            // Update the Juju status
            crate::juju::set_status(tools::get_juju_status(&self), Some(&environment))
                .or_else(|e| call.reply_error(e.to_string()))?;

            // Just reply without doing anything
            call.reply(None, None)?;
        }

        // Unset the Juju context as it will be invalid after the hook exits
        std::env::remove_var("JUJU_CONTEXT_ID");

        Ok(())
    }

    /// Stop the Lucky daemon
    fn stop_daemon(&self, call: &mut dyn rpc::Call_StopDaemon) -> varlink::Result<()> {
        log::info!("Shutting down server");
        // Set the stop_listening=true.
        self.stop_listening.store(true, Ordering::SeqCst);

        // Reply and exit
        call.reply()?;
        Ok(())
    }

    /// Set a script's status
    fn set_status(
        &self,
        call: &mut dyn rpc::Call_SetStatus,
        script_id: String,
        status: rpc::ScriptStatus,
        environment: HashMap<String, String>,
    ) -> varlink::Result<()> {
        // Add status to script statuses
        let status: ScriptStatus = status.into();
        log::info!(r#"Setting status for script "{}": {}"#, script_id, status);
        self.state
            .write()
            .unwrap()
            .script_statuses
            .insert(script_id, status);

        // Set the Juju status to the consolidated script statuses
        crate::juju::set_status(tools::get_juju_status(&self), Some(&environment))
            .or_else(|e| call.reply_error(e.to_string()))?;

        // Reply
        call.reply()?;
        Ok(())
    }
}

//
// Helpers
//

/// Convenience for handling errors in Results
fn log_error(e: anyhow::Error) {
    log::error!("{:?}", e);
}

/// Get the server service
pub(crate) fn get_service(
    lucky_metadata: LuckyMetadata,
    charm_dir: PathBuf,
    state_dir: PathBuf,
    stop_listening: Arc<AtomicBool>,
) -> varlink::VarlinkService {
    // Create a new daemon instance
    let daemon_instance = LuckyDaemon::new(lucky_metadata, charm_dir, state_dir, stop_listening);

    // Return the varlink service
    varlink::VarlinkService::new(
        "lucky.rpc",
        "lucky daemon",
        clap::crate_version!(),
        "https://github.com/katharostech/lucky",
        vec![Box::new(lucky_rpc::new(Box::new(daemon_instance)))],
    )
}

/// Get the client
pub(crate) fn get_client(connection: Arc<RwLock<varlink::Connection>>) -> rpc::VarlinkClient {
    // Return the varlink client
    rpc::VarlinkClient::new(connection)
}
